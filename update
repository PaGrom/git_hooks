#!/usr/bin/python

import os
import sys
import re
from rtgitlib import *


zero = '0' * 40

GATEKEEPERS_GROUP = []

errors = []


class Rev_Struct:

    def __init__(self, refname, old_rev, new_rev):
        DEBUG('refname=%s' % refname)
        DEBUG('old_rev=%s' % old_rev)
        DEBUG('new_rev=%s' % new_rev)

        self.refname = refname
        self.old = old_rev
        self.new = new_rev
        # 0000 -> 1234 (create)
        # 1234 -> 2345 (update)
        # 2345 -> 0000 (delete)
        new_rev_is_void = re.match("^0+$", new_rev)
        old_rev_is_void = re.match("^0+$", old_rev)
        if new_rev_is_void and old_rev_is_void:
            ERROR("this program didn't anticipate both rev's being all zero")
            sys.exit(2)
        elif old_rev_is_void:
            self.new_t = get_rev_type(self.new)
            self.old_t = "n/a"
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "create"
        elif new_rev_is_void:
            self.new_t = "n/a"
            self.old_t = get_rev_type(self.old)
            self.curr = self.old
            self.curr_t = self.old_t
            self.change_t = "delete"
        else:
            self.new_t = get_rev_type(self.new)
            self.old_t = get_rev_type(self.old)
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "update"
        if self.refname.find('refs/tags/') == 0:
            self.kind = "tag"
        elif self.refname.find('refs/heads/') == 0:
            self.kind = "branch"
        else:
            ERROR("this program didn't anticipate pushing to", self.refname)
            sys.exit(2)
        DEBUG('new_rev_t=', self.new_t)
        DEBUG('old_rev_t=', self.old_t)
        DEBUG('change_t=', self.change_t)
        DEBUG('curr_rev=', self.curr)
        DEBUG('curr_rev_t=', self.curr_t)
        DEBUG('kind=', self.kind)


def DEBUG(*msg):
    if DEBUG_LEVEL != '0':
        print >>sys.stderr, "[DEBUG] ", ''.join(msg)


def ERROR(*msg):
    print >>sys.stderr, "[ERROR] ", ''.join(msg)


def INFO(*msg):
    print >>sys.stderr, "[INFO] ", ''.join(msg)


def check_errors():
    """
    Print error messages and exit with an error code
    """

    for error in errors:
        ERROR('%s' % str(error))

    if len(errors) != 0:
        sys.exit(1)


def add_error(*msg):
    """
    Add error message to errors list
    """

    global errors
    errors.append(''.join(msg))


def check_deletion():
    """
    Denies deletion of a branch
    """

    if newrev == zero:
        add_error("[POLICY] Refusing to delete this branch")


def check_fast_forward():
    """
    Enforces fast-forward only pushes
    """

    if oldrev != zero:  # ignore new branches
        missed_refs = os.popen("git rev-list %s..%s" % (newrev, oldrev)).read()
        missed_ref_count = len(missed_refs.split("\n"))
        if missed_ref_count > 0:
            add_error(
                "[POLICY] Non fast-forward updates are not allowed for this branch")


def check_commit_msg():
    rev = Rev_Struct(refname, oldrev, newrev)

    DEBUG('Receiving commit from %s (%s)' % (user.name, user.real_name))

    if re.match(r'refs/heads/[^/]+$', rev.refname):
        if not gatekeeper():
            add_error("Pushing branch %s requires gatekeeper permissions\n"
                      % rev.refname)

        if rev.change_t == 'create':
            revs = list_created_revs(rev)
        else:
            revs = list_added_revs(rev)

        for (commitish, title) in revs:
            DEBUG("processing %s  %s" % (commitish, title))
            parse_commit_header(commitish)
    else:
        add_error('Unknown refname %s' % rev.refname)


def gatekeeper():
    """
    Check user is gatekeeper
    """

    for group in user.groups:
        if group in GATEKEEPERS_GROUP:
            return True

    return False


def parse_commit_header(commitish):
    """
    Parse commit message and check format
    """

    hdr = CommitSubHeader()
    line_list = dump_header_body(commitish)
    while len(line_list) != 0:
        line = line_list.pop(0)

        if match_or_die_if_multiply_defined(line, 'REF: ', hdr.ref):
            hdr.ref = 1  # Not None
            if not Commit.rt_header_fields['REF: '].match(line[len('REF: '):]):
                add_error("Wrong field 'REF:' in %s" % commitish)

        elif match_or_die_if_multiply_defined(line, 'Signed-off-by: ', hdr.signed):
            hdr.signed = 1  # Not None
            if not Commit.rt_header_fields['Signed-off-by: '].match(line[len('Signed-off-by: '):]):
                add_error("Wrong field 'Signed-off-by:' in %s" % commitish)

    if hdr.ref == None:
        add_error("No field 'REF:' in %s" % commitish)
    if hdr.signed == None:
        add_error("No field 'Signed-off-by:' in %s" % commitish)


def set_global_constants(argv):
    """
    Initialize several global contants used by this program
    """

    global DEBUG_LEVEL

    try:
        DEBUG_LEVEL = get_config('rtsoft.debug')
    except GitError as msg:
        ERROR(str(msg), "Maybe its not defined.")
        sys.exit(1)

    global GATEKEEPERS_GROUP

    try:
        GATEKEEPERS_GROUP = get_config('rtsoft.gatekeepers-group')
    except GitError as msg:
        ERROR(str(msg), "Maybe its not defined.")
        sys.exit(1)

    global refname
    global oldrev
    global newrev

    (refname, oldrev, newrev) = argv

    global user

    user = User()


def main(argv):
    if not running_as_hook():
        ERROR("Don't run this script from the command line.\n")
        sys.exit(2)

    set_global_constants(argv)

    INFO("Enforcing Policies... \n(%s) (%s) (%s)\n" %
        (refname, oldrev[0:6], newrev[0:6]))

    check_deletion()
    check_fast_forward()
    check_commit_msg()

    check_errors()


if __name__ == "__main__":
    main(sys.argv[1:])
else:
    ERROR('__name__ != "__main__"')
    sys.exit(2)
