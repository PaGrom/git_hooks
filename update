#!/usr/bin/python

import os
import sys
from rtgitlib import *

refname = None
oldrev = None
newrev = None
zero = '0' * 40

DEBUG_LEVEL = None
GATEKEEPERS_GROUP = None

errors = []


def DEBUG(*msg):
    if DEBUG_LEVEL != '0':
        print >>sys.stderr, "[DEBUG] ", ''.join(msg)


def ERROR(*msg):
    print >>sys.stderr, "[ERROR] ", ''.join(msg)


def INFO(*msg):
    print >>sys.stderr, "[INFO] ", ''.join(msg)


def check_errors():
    """
    Print error messages and exit with an error code
    """

    for error in errors:
        ERROR('%s\n' % str(error))

    sys.exit(1)


def add_error(msg):
    """
    Add error message to errors list
    """

    errors.append(msg)


def check_deletion():
    """
    Denies deletion of a branch
    """

    if newrev == zero:
        add_error("[POLICY] Refusing to delete this branch")


def check_fast_forward():
    """
    Enforces fast-forward only pushes
    """

    if oldrev != zero:  # ignore new branches
        missed_refs = os.popen("git rev-list %s..%s" % (newrev, oldrev)).read()
        missed_ref_count = len(missed_refs.split("\n"))
        if missed_ref_count > 0:
            add_error(
                "[POLICY] Non fast-forward updates are not allowed for this branch")


def set_global_constants(argv):
    """
    Initialize several global contants used by this program
    """

    global refname
    global oldrev
    global newrev

    (refname, oldrev, newrev) = argv

    DEBUG('refname: ', refname)
    DEBUG('oldrev: ', oldrev)
    DEBUG('newrev: ', newrev)


def main(argv):

    if not running_as_hook():
        ERROR("Don't run this script from the command line.\n")
        sys.exit(2)

    set_global_constants(argv)

    sys.stdout.write("Enforcing Policies... \n(%s) (%s) (%s)\n" %
                    (refname, oldrev[0:6], newrev[0:6]))

    check_deletion()
    check_fast_forward()

    check_errors()

if __name__ == "__main__":
    main(sys.argv[1:])
else:
    ERROR('__name__ != "__main__"')
    sys.exit(2)
