#!/usr/bin/python

import os
import sys
import re
from rtgitlib import *


zero = '0' * 40

DEBUG_LEVEL = False

GATEKEEPERS = []
GATEKEEPERS_ENABLE = False

COMMIT_MESSAGE_CHECK = False

BRANCH_NAME_CHECK = False

MASTER_BRANCHES = []

RECIPIENTS = []

EMAIL_MESSAGES = []

errors = []


class Rev_Struct:

    def __init__(self, refname, old_rev, new_rev):
        DEBUG('refname=%s' % refname)
        DEBUG('old_rev=%s' % old_rev)
        DEBUG('new_rev=%s' % new_rev)

        self.refname = refname
        self.old = old_rev
        self.new = new_rev
        # 0000 -> 1234 (create)
        # 1234 -> 2345 (update)
        # 2345 -> 0000 (delete)
        new_rev_is_void = re.match("^0+$", new_rev)
        old_rev_is_void = re.match("^0+$", old_rev)
        if new_rev_is_void and old_rev_is_void:
            ERROR("this program didn't anticipate both rev's being all zero")
            sys.exit(2)
        elif old_rev_is_void:
            self.new_t = get_rev_type(self.new)
            self.old_t = "n/a"
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "create"
        elif new_rev_is_void:
            self.new_t = "n/a"
            self.old_t = get_rev_type(self.old)
            self.curr = self.old
            self.curr_t = self.old_t
            self.change_t = "delete"
        else:
            self.new_t = get_rev_type(self.new)
            self.old_t = get_rev_type(self.old)
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "update"
        if self.refname.find('refs/tags/') == 0:
            self.kind = "tag"
        elif self.refname.find('refs/heads/') == 0:
            self.kind = "branch"
        else:
            ERROR("this program didn't anticipate pushing to", self.refname)
            sys.exit(2)
        DEBUG('new_rev_t=', self.new_t)
        DEBUG('old_rev_t=', self.old_t)
        DEBUG('change_t=', self.change_t)
        DEBUG('curr_rev=', self.curr)
        DEBUG('curr_rev_t=', self.curr_t)
        DEBUG('kind=', self.kind)


def DEBUG(*msg):
    if DEBUG_LEVEL:
        print >>sys.stderr, "[DEBUG] ", ''.join(msg)


def ERROR(*msg):
    print >>sys.stderr, "[ERROR] ", ''.join(msg)


def INFO(*msg):
    print >>sys.stderr, "[INFO] ", ''.join(msg)


def check_errors():
    """
    Print error messages and exit with an error code
    """

    for error in errors:
        ERROR('%s' % str(error))

    if len(errors) != 0:
        sys.exit(1)


def add_error(*msg):
    """
    Add error message to errors list
    """

    global errors
    errors.append(''.join(msg))


def check_deletion():
    """
    Denies deletion of a ref
    """

    if newrev == zero:
        ERROR("[POLICY] Refusing to delete this ref")
        sys.exit(1)


def check_fast_forward():
    """
    Enforces fast-forward only pushes
    """

    if oldrev != zero:  # ignore new branches
        cmd = ['git', 'rev-list', newrev + '..' + oldrev]
        missed_refs = call(cmd)
        missed_ref_count = len(missed_refs)
        if missed_ref_count > 0:
            add_error(
                "[POLICY] Non fast-forward updates are not allowed for this branch")


def pre_receive():
    rev = Rev_Struct(refname, oldrev, newrev)

    DEBUG('Receiving commit from %s (%s)' % (user.name, user.real_name))

    if master_branch(rev.refname[len('refs/heads/'):]):
        if GATEKEEPERS_ENABLE and not gatekeeper():
            add_error("Pushing branch %s requires gatekeeper permissions\n"
                      % rev.refname)

    elif re.match(r'^refs/heads/.+$', rev.refname):
        if BRANCH_NAME_CHECK and GATEKEEPERS_ENABLE and not gatekeeper():
            if not re.match('^refs/heads/bugfixes/([\d]){1,6}_.+$', rev.refname):
                add_error("""Creating branch %s requires gatekeeper permissions.
                           You have to create branch with name format:
                           'refs/heads/bugfixes/#<bug_num>_<branch_version>'\n"""
                          % rev.refname)

        if len(rev.refname) > 72:
            add_error("Branch name must be less then 72 char")

        if rev.refname.startswith('refs/heads/origin/'):
            add_error("Branch name can't start with 'origin/'")

    else:
        add_error('Unknown refname %s' % rev.refname)

    if rev.change_t == 'create':
        revs = list_created_revs(rev)
    else:
        revs = list_added_revs(rev)

    global RECIPIENTS

    try:
        RECIPIENTS = get_config('branch.%s.recipients' %
                                rev.refname[len('refs/heads/'):]).split(' ')
    except GitError as msg:
        DEBUG("%s" % msg)

    RECIPIENTS = [x + '@dev.rtsoft.ru ' for x in RECIPIENTS]

    for (commitish, title) in revs:
        if len(title) < 5 or len(title) > 78:
            add_error("Wrong size of Summary field in %s" % commitish)
        if "REF:" in title:
            add_error("No empty line after Summary field in %s" % commitish)
        DEBUG("processing %s  %s" % (commitish, title))
        hdr = check_commit_msg(commitish)
        if RECIPIENTS:
            global EMAIL_MESSAGES
            message = gen_mail(RECIPIENTS, rev, hdr, commitish, title)
            EMAIL_MESSAGES.append(message)


def gatekeeper():
    """
    Check user is gatekeeper
    """

    if user.name in GATEKEEPERS:
        return True

    return False


def master_branch(branch_name):
    """
    Check branch_name is master branch
    """

    if branch_name in MASTER_BRANCHES:
        return True

    return False


def check_commit_msg(commitish):
    """
    Parse commit message and check format
    """

    hdr = CommitSubHeader()
    line_list = dump_header_body(commitish)

    while len(line_list) != 0:
        line = line_list.pop(0)

        if match_or_die_if_multiply_defined(line, 'REF: ', hdr.ref):
            hdr.ref = 1  # Not None
            if COMMIT_MESSAGE_CHECK and not Commit.rt_header_fields['REF: '].match(line[len('REF: '):]):
                add_error("Wrong field 'REF:' in %s" % commitish)
            else:
                hdr.ref = line[len('REF: '):]

        elif match_or_die_if_multiply_defined(line, 'Signed-off-by: ', hdr.signed):
            hdr.signed = 1  # Not None
            if COMMIT_MESSAGE_CHECK and not Commit.rt_header_fields['Signed-off-by: '].match(line[len('Signed-off-by: '):]):
                add_error("Wrong field 'Signed-off-by:' in %s" % commitish)
            else:
                hdr.signed = line[len('Signed-off-by: '):]

    if COMMIT_MESSAGE_CHECK and hdr.ref == None:
        add_error("No field 'REF:' in %s" % commitish)
    if COMMIT_MESSAGE_CHECK and hdr.signed == None:
        add_error("No field 'Signed-off-by:' in %s" % commitish)

    return hdr


def gen_mail(recipients, rev, hdr, commitish, title):
    """
    Generate email message
    """

    def emitln(fd, *args):
        return fd + ''.join(args) + '\n'

    DEBUG("Begin gen email message")
    committer = "git@dev.rtsoft.ru"
    content_type = "text/plain"
    subject = "[Bug %s] %s" % (hdr.ref, title)
    DEBUG("  Subject: %s" % subject)
    message = ''
    message = emitln(message, "From: ", committer)
    message = emitln(message, "To: ", *recipients)
    message = emitln(message, "Subject: ", subject)
    message = emitln(message, "Content-Type: ", content_type)
    message = emitln(message)
    message = emitln(message, "Refname: ", rev.refname)
    message = emitln(message, "Reftype: ", rev.kind)
    message = emitln(message, "Old_Rev: ", rev.old)
    message = emitln(message, "New_Rev: ", rev.new)
    message = emitln(message, 'Receiving commit from %s (%s)' %
                     (user.name, user.real_name))
    message = emitln(message)
    message = emitln(message, "Commit title: ", title)
    message = emitln(message, "Commit message: ")
    line_list = dump_header_body(commitish)
    for line in line_list:
        message = emitln(message, line)

    return message


def send_emails():
    """
    Uses sendmail for send email
    """

    cmd = "sendmail -f git@dev.rtsoft.ru"
    for msg in EMAIL_MESSAGES:
        for rec in RECIPIENTS:
            call("echo '%s' | %s %s" % (msg, cmd, rec), None, True)


def set_global_constants(argv):
    """
    Initialize several global contants used by this program
    """

    global DEBUG_LEVEL

    try:
        if get_config('rtsoft.debug') == '1':
            DEBUG_LEVEL = True
    except GitError as msg:
        pass

    global GATEKEEPERS
    global GATEKEEPERS_ENABLE

    try:
        GATEKEEPERS = get_config('rtsoft.gatekeepers').split(' ')
        GATEKEEPERS_ENABLE = True
    except GitError as msg:
        pass

    global COMMIT_MESSAGE_CHECK

    try:
        if get_config('rtsoft.commit-message-check') == '1':
            COMMIT_MESSAGE_CHECK = True
    except GitError as msg:
        pass

    global BRANCH_NAME_CHECK

    try:
        if get_config('rtsoft.branch-name-check') == '1':
            BRANCH_NAME_CHECK = True
    except GitError as msg:
        pass

    global MASTER_BRANCHES

    try:
        MASTER_BRANCHES = get_config('rtsoft.master-branches').split(' ')
    except GitError as msg:
        DEBUG("Can't read rtsoft.master-branches. Maybe it is not define")

    global refname
    global oldrev
    global newrev

    (refname, oldrev, newrev) = argv

    global user

    user = User()


def main(argv):
    if not running_as_hook():
        ERROR("Don't run this script from the command line.\n")
        sys.exit(2)

    set_global_constants(argv)

    INFO("Enforcing Policies... \n(%s) (%s) (%s)\n" %
        (refname, oldrev[0:6], newrev[0:6]))

    check_deletion()
    check_fast_forward()
    pre_receive()

    check_errors()

    send_emails()


if __name__ == "__main__":
    main(sys.argv[1:])
else:
    ERROR('__name__ != "__main__"')
    sys.exit(2)
