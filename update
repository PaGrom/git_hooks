#!/usr/bin/python

import os
import sys
from rtgitlib import *


zero = '0' * 40

GATEKEEPERS_GROUP = None

errors = []


class Rev_Struct:

    def __init__(self, refname, old_rev, new_rev):
        DEBUG('refname=%s' % refname)
        DEBUG('old_rev=%s' % old_rev)
        DEBUG('new_rev=%s' % new_rev)

        self.refname = refname
        self.old = old_rev
        self.new = new_rev
        # 0000 -> 1234 (create)
        # 1234 -> 2345 (update)
        # 2345 -> 0000 (delete)
        new_rev_is_void = re.match("^0+$", new_rev)
        old_rev_is_void = re.match("^0+$", old_rev)
        if new_rev_is_void and old_rev_is_void:
            ERROR("this program didn't anticipate both rev's being all zero")
            sys.exit(2)
        elif old_rev_is_void:
            self.new_t = get_rev_type(self.new)
            self.old_t = "n/a"
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "create"
        elif new_rev_is_void:
            self.new_t = "n/a"
            self.old_t = get_rev_type(self.old)
            self.curr = self.old
            self.curr_t = self.old_t
            self.change_t = "delete"
        else:
            self.new_t = get_rev_type(self.new)
            self.old_t = get_rev_type(self.old)
            self.curr = self.new
            self.curr_t = self.new_t
            self.change_t = "update"
        if string.find(self.refname, 'refs/tags/') == 0:
            self.kind = "tag"
        elif string.find(self.refname, 'refs/heads/') == 0:
            self.kind = "branch"
        else:
            ERROR("this program didn't anticipate pushing to", self.refname)
            sys.exit(2)
        DEBUG('new_rev_t=', self.new_t)
        DEBUG('old_rev_t=', self.old_t)
        DEBUG('change_t=', self.change_t)
        DEBUG('curr_rev=', self.curr)
        DEBUG('curr_rev_t=', self.curr_t)
        DEBUG('kind=', self.kind)


def DEBUG(*msg):
    if DEBUG_LEVEL != '0':
        print >>sys.stderr, "[DEBUG] ", ''.join(msg)


def ERROR(*msg):
    print >>sys.stderr, "[ERROR] ", ''.join(msg)


def INFO(*msg):
    print >>sys.stderr, "[INFO] ", ''.join(msg)


def check_errors():
    """
    Print error messages and exit with an error code
    """

    for error in errors:
        ERROR('%s\n' % str(error))

    sys.exit(1)


def add_error(msg):
    """
    Add error message to errors list
    """

    global errors
    errors.append(msg)


def check_deletion():
    """
    Denies deletion of a branch
    """

    if newrev == zero:
        add_error("[POLICY] Refusing to delete this branch")


def check_fast_forward():
    """
    Enforces fast-forward only pushes
    """

    if oldrev != zero:  # ignore new branches
        missed_refs = os.popen("git rev-list %s..%s" % (newrev, oldrev)).read()
        missed_ref_count = len(missed_refs.split("\n"))
        if missed_ref_count > 0:
            add_error(
                "[POLICY] Non fast-forward updates are not allowed for this branch")


def do_ref(rev):
    pass


def set_global_constants(argv):
    """
    Initialize several global contants used by this program
    """

    global DEBUG_LEVEL

    try:
        DEBUG_LEVEL = get_config('rtsoft.debug')
    except GitError as msg:
        ERROR(str(msg), "Maybe its not defined.")
        sys.exit(1)

    global refname
    global oldrev
    global newrev

    (refname, oldrev, newrev) = argv

    DEBUG('refname: ', refname)
    DEBUG('oldrev: ', oldrev)
    DEBUG('newrev: ', newrev)


def main(argv):
    if not running_as_hook():
        ERROR("Don't run this script from the command line.\n")
        sys.exit(2)

    set_global_constants(argv)

    sys.stdout.write("Enforcing Policies... \n(%s) (%s) (%s)\n" %
                    (refname, oldrev[0:6], newrev[0:6]))

    check_deletion()
    check_fast_forward()

    check_errors()


if __name__ == "__main__":
    main(sys.argv[1:])
else:
    ERROR('__name__ != "__main__"')
    sys.exit(2)
